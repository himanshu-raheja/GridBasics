gridContainer {
    display: grid;
    grid-template: auto-flow min-content / repeat(12, 1fr);
    grid-gap: 1em;
    margin: 1em;
}
header,footer,div,aside,main,nav {
    background: gray;
    border: 1px solid yellow;
}
header,footer {
    /* grid-column-start: 1;
    grid-column-end: 13; */
    
    /* Shothand */
    grid-column: 1 / 13;
}
main {
    /* -1 is equal to last grid column line and -2 is equal to last second column line and so on, so here we can use -1 as well */
    /* grid-column-start: 5;
    grid-column-end: 13; 
    grid-row-start: 2;
    grid-row-end: 4; */

    grid-area: 2 / 5 / 4 / 13;
}
nav, aside {
     
    /* grid-column-start: 1;
    grid-column-end: 5; */

    grid-column: 1 / 5; 
    /* grid-column:span 4; */
}
/* article {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(2, 1fr);
    grid-column-start: 1;
    grid-column-end: 13;
    grid-gap: 1em;

} */

/* #pie1, #pie5 {
    grid-column-start: 1;
    grid-column-end: 4;    
}
 #pie2, #pie6 {
    grid-column-start: 4;
    grid-column-end: 7;    
}
 #pie3, #pie7 {
    grid-column-start: 7;
    grid-column-end: 10;    
}
#pie4, #pie8 {
    grid-column-start: 10;
    grid-column-end: 13;    
}  */

div {
    grid-column: span 3;
}

/* 
grid-column-end: span 2 says that i dont care where my column start but it should take up 2 column lines.
grid-column is the shorthand for grid-column-start & grid-column-end same goes for grid-row
### grid-column: start / end 

grid-area is used as shorthand for grid-row & grid-column
grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end
*/

/*
*********************** You can only align a item if its inside the container and have extra space ******************************
*/

